#!/usr/bin/env rake


begin
	require 'hoe'
rescue LoadError
	abort "This Rakefile requires 'hoe' (gem install hoe)"
end

require 'pathname'
require 'rake/clean'

$trace = Rake.application.options.trace

SQLUNET_VERSION = '5.2.0-31'
SQLUNET_SHORT_VERSION = SQLUNET_VERSION[ /\A([^-]+)/ ]

# https://versaweb.dl.sourceforge.net/project/sqlunet/5.2.0/sqlite/sqlite-5.2.0-31-all.zip

SQLUNET_BASE_URI = "https://downloads.sourceforge.net/project/sqlunet/"
SQLUNET_ZIPFILE  = "sqlite-#{SQLUNET_VERSION}-all.zip"
SQLUNET_URI      = "#{SQLUNET_BASE_URI}/#{SQLUNET_SHORT_VERSION}/sqlite/#{SQLUNET_ZIPFILE}"

BASEDIR = Pathname( __FILE__ ).dirname.relative_path_from( Pathname.pwd )
DATADIR = BASEDIR + 'data'
DBDIR   = DATADIR + 'wordnet-defaultdb'

ORIGINAL_DBFILE = 'sqlite-31.db'
DEST_DBFILE     = DBDIR + 'wordnet31.sqlite'

Hoe.plugin :mercurial
Hoe.plugin :signing

Hoe.plugins.delete :rubyforge

hoespec = Hoe.spec 'wordnet-defaultdb' do
	self.readme_file = 'README.rdoc'
	self.history_file = 'History.rdoc'
	self.extra_rdoc_files = FileList[ '*.rdoc' ]
	self.license 'BSD-3-Clause'

	self.developer 'Michael Granger', 'ged@FaerieMUD.org'

	self.dependency 'wordnet', '~> 1.1'
	self.dependency 'sqlite3', '~> 1.3'

	self.dependency 'rubyzip', '~> 1.2', :developer

	self.require_ruby_version( '>=2.3' )
end

ENV['VERSION'] ||= hoespec.spec.version.to_s

task :default => :gem

task :build => hoespec.spec.files

### Make the ChangeLog update if the repo has changed since it was last built
file '.hg/branch'
file 'ChangeLog' => '.hg/branch' do |task|
	$stderr.puts "Updating the changelog..."
	content = make_changelog()
	File.open( task.name, 'w', 0644 ) do |fh|
		fh.print( content )
	end
end

# Rebuild the ChangeLog immediately before release
task :prerelease => 'ChangeLog'


#
# Tasks for downloading the data file/s
#

### Download the file at +sourceuri+ via HTTP and write it to +targetfile+.
def download( sourceuri, targetfile=nil )
	oldsync = $stdout.sync
	$stdout.sync = true
	require 'open-uri'

	targetpath = Pathname.new( targetfile )

	$stderr.puts "Downloading %s to %s" % [sourceuri, targetfile]
	$stderr.puts "  connecting..." if $trace
	ifh = open( sourceuri ) do |ifh|
		$stderr.puts "  connected..." if $trace
		targetpath.open( File::WRONLY|File::TRUNC|File::CREAT, 0644 ) do |ofh|
			$stderr.puts "Downloading..."
			buf = ''

			while ifh.read( 16384, buf )
				until buf.empty?
					bytes = ofh.write( buf )
					buf.slice!( 0, bytes )
				end
			end

			$stderr.puts "Done."
		end

	end

	return targetpath
ensure
	$stdout.sync = oldsync
end


### Extract the given +sourcepath+ of the specified +zipfile+ into the given +destpath+.
def unzip( zipfile, sourcepath, destpath )
	require 'zip'

	zf = Zip::File.open( zipfile )
	ent = zf.get_entry( sourcepath )

	ent.extract( destpath )
end


# Download the database zipfile
file SQLUNET_ZIPFILE.to_s do |task|
	download SQLUNET_URI, task.name
end
CLOBBER.include( SQLUNET_ZIPFILE.to_s )

# Extract the database from the downloaded zipfile
file DEST_DBFILE.to_s => [SQLUNET_ZIPFILE.to_s] do |task|
	mkdir_p( DEST_DBFILE.dirname, :verbose => $trace )
	unzip task.prerequisites.first, ORIGINAL_DBFILE, DEST_DBFILE.to_s
end
CLEAN.include( DEST_DBFILE.to_s )
CLOBBER.include( DATADIR.to_s )

# Extract the license files from the downloaded zipfile
rule( /^LICENSE-(\w+)\.txt$/ => [ SQLUNET_ZIPFILE.to_s ]) do |task|
	if task.name.include?( 'sqlunet' )
		unzip task.prerequisites.first, "legal/LICENSE", task.name
	else
		unzip task.prerequisites.first, "legal/#{task.name}", task.name
	end
end

CLEAN.include( 'LICENSE-*.txt' )

